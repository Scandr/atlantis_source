---
- name: Install container runtime containerd, kubeadm, kubelet, kubectl
  hosts: all
  gather_facts: False
  tasks:
  - name: Add containerd apt repo
    block:
      - name: Get docker apt repo key
        ansible.builtin.get_url:
          url: https://download.docker.com/linux/ubuntu/gpg
          dest: /etc/apt/keyrings/docker.asc

      - name: Get system architecture
        shell:
          cmd: dpkg --print-architecture
        register: sys_arch
      - name: Output sys_arch
        debug:
          var: sys_arch
          verbosity: 0

      - name: Get ubuntu version name
        shell:
          cmd: '. /etc/os-release && echo "$VERSION_CODENAME"'
        register: ubuntu_name
      - name: Output ubuntu_name
        debug:
          var: ubuntu_name
          verbosity: 0

      - name: Add docker apt repo
        ansible.builtin.apt_repository:
          repo: "deb [arch={{ sys_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_name.stdout }} stable"
          state: present

  - name: Install containerd and it's dependencies
    ansible.builtin.apt:
      update_cache: yes
      pkg:
      - ca-certificates
      - apt-transport-https
      - gpg
      - curl
      - gnupg
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - containerd.io
      - golang-go
      - nfs-common

  - name: Set containerd's config to default
    ansible.builtin.shell:
      cmd: 'containerd config default > /etc/containerd/config.toml'

  - name: Enable systemd cgroup driver in containerd's config
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      line: '    SystemdCgroup = true'
      search_string: 'SystemdCgroup'

  - name: Restart containerd service
    ansible.builtin.service:
      name: containerd
      state: restarted

#  - name: Remove services
#    community.docker.docker_compose:
#      project_src: "../docker"
#      state: absent
#
#  - name: Create and start services
#    community.docker.docker_compose:
#      project_src: "../docker"
#    register: output
#
#  - name: Show results
#    ansible.builtin.debug:
#      var: output

  - name: Create atlantis user
    ansible.builtin.user:
      name: atlantis
      group: docker
      home: /opt/atlantis

  - name: Create dir for atlantis
    ansible.builtin.file:
      path: /opt/atlantis/docker
      state: directory
      mode: '0755'
      owner: atlantis
      group: atlantis

  - name: Copy dcoker-compose
    ansible.builtin.copy:
      src: docker/
      dest: /opt/tlantis/docker/
      owner: atlantis
      group: atlantis
      mode: '0644'

  - name: Run docker-compose
    ansible.builtin.shell:
      cmd: "docker-compose -f /opt/tlantis/docker/docker-compose.yml up -d"
    become: yes
    become_user: atlantis